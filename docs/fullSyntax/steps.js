/**
 * Created on 03.11.2015.
 */
feature('имя фичи', '[имя группы]')
    .add(steps('выполниться если нет пометки only у других')
        .given("Array", [1, 2, 10])
        .when('I enter "1"')
        .and('I add "2"')
        .then('I should get "3"'))

    .xadd(steps('не выполниться - добавиться как xdescribe')
        .given('object', {x: 1, y: 2})
        .when('I add "3"')
        .then('I should get "6"'))

    .addOnly(steps('выполниться только этот')
        .when('I eventually add "1" and "2"')
        .xthen('не выполниться, попадётк как xit')
        .then('Проверка')
        .then('запустить из "фона"').fromBackground()
        .then('запустить из "группы"').fromGroup())

    .add(steps('шаги со списком примеров')
        .when('Я складываю "{v1}" и "{v2}"')
        .then('Получаю "{sum}"')
        .examples([
            {v1: 10, v2: 20, sum: 30},
            {v1: 3, v2: 5, sum: 7}
        ]))

    .use('[имя фона]');


feature('Grouping', 'bjc')
    .add(steps('Same feature name in group and without it'))

    .add(steps('Same feature name in different groups'));


scenario('отдельно стоящий сценарий', '[возможно в группе]')
    .add(steps('name_1')
        .given('что-то')
        .when('что-то')
        .then('что-то'))
    .add(steps('name_2')
        .when()
        .then())
    .add(steps('name_3')
        .when('enter "{1}", "{2}"')
        .then('has "{3}"')
        .examples([ // при построении дерева, будут добавлены 2 одинаковые ветки
            {'1': 1, '2': 2, '3': 3},
            {'1': 7, '2': -3, '3': 4}
        ]))
    .addGraph([
        ['init',
            ['p1', 'name_1'],
            ['p1', 'name_2']],
        ['p1',
            ['p2', 'name_1'],
            ['end', 'name_3']],
        ['p2',
            ['end', 'name_2']],
        ['откуда',
            ['куда', 'каким путём/шагами']
        ]
    ])
    .use('[можно задать фон]')
    .examples([
        // при наличии - перекроет examples из steps
        // - если есть перекрытие выдаст warning в xit в начале шагов
        // и будет запускать только озаченные пути
        [['p1', 'end'], {'1': 1, '2': 2, '3': 3}],
        [['p1', 'p2', 'end'], [
            // можно задать массив примеров для данного пути
            {'...': '...'},
            {'...': '...'}
        ]],
        [
            'опционально имя в начале, которое будет у define общего' +
            'для цепочки',
            ['цепочка', 'имён', 'переходов'],
            [{
                'список': 'параметров',
                'используемых': 'в переходах'
            },{
                'сисок': 'поскольку',
                'одну и ту-же цепочку':'можно прогнать с разными параметрами'
            }],
        ]
    ]);
